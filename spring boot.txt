ip : 서버가 동작중인 컴퓨터 주소
포트 : 해당 ip안에서 어떤 프로그램을 동작할건지 구분 (하나의 서버 주소에서 포트로 서비스 구분)

spring에서는 라이브러리를 따로 maven repository 같은 사이트에서 직접 복사로 코드를 들고와서
build 해주는 gradle이나 maven부분의 의존성(dependencies)에 추가해줘서 사용함

@ spring MVC 패턴 (model, view, controller)
= spring boot의 디자인 패턴

* controller
컨트롤러는 클라이언트의 request 요청에 따라서 그에 맞는 응답을 하게끔 하는
핸들러를 의미함 (프론트의 router 같은 기능)
(이때 요청을 받고 그 요청에 대한 데이터들을 확인후 유효성 검사도 진행함
= validation클래스나 유효성검사 어노테이션을 이용)

* view
뷰는 클라이언트의 요청에 맞게끔 컨트롤러가 응답할때 보내는 화면에 렌더링될
프론트 리턴값 자체를 의미. (사실 react등으로 프론트를 개발시 사용하지 않음)

* model
모델은 데이터를 관리하는것으로 db와 상호작용하거나 데이터를 처리하고 저장하는 역할을 함
순서대로는 클라이언트 요청 > 컨트롤러 > 모델 > 뷰 (클라이언트 응답) 순서대로 진행

>>> 이때 컨트롤러와 뷰는 프론트엔드쪽(react)의 라운터, 핸들러, 컴포넌트등이 각각의 역할을
대신하므로 백엔드에서는 모델의 역할(데이터베이스와 상호작용)만 하면됨.
>>> 한마디로 mvc 패턴은 결국 프로그램을 만들때의 하나의 디자인패턴을 말하는것이고 그안에서
프론트와 백이 각각의 역할을 담당한다 보면됨.

@ 모델의 역할로서 db와 상호작용하는 여러가지 방법

* JDBC (java database connect)
= java 코드 내에서 sql문을 작성해서 사용 <현업에서 가장 사용량이 적음>
- 직접적인 sql문을 사용하기에 세부사항을 다루기 가능하며 높은 수준의 제어를 제공하며,
  프레임워크 없이 단독적으로 순수하게 데이터베이스와 상호작용하여 경량
- 하지만 반복적인 코드가 많아지고 유지보수가 어려워짐.

* mybatis
= java코드와 sql문을 엄격하게 구분지어서 사용함. <현업에서 어느정도 사용됨>
- sql을 xml 파일로 관리해 java 코드와 분리, sql문 작성으로 인해 성능 최적화가 용이
- sql 매핑을 수동으로 정의해야하여 코드가 복잡해질수있음.

* JPA (ORM - object relational mapping)
= Hibernate를 많이 사용하여 ORM(객체와 데이터베이스간 자동매핑)을 구현하며,
   객체 대상으로 하는 쿼리언어를 제공해 sql과 유사한 문법으로 데이터 조회가능.
   기본적으로 crud 작업이 자동으로 되며, 캐싱지원, 트랜잭션 관리등 많은 기능이 있음.
= sql을 작성하지않음 <현업에서 가장 많이 사용됨>
- 객체와 관계형 데이터베이스 간의 매핑을 자동화
- sql을 직접 작성하지않고 객체 지향적으로 데이터베이스를 다룸
- 생산성이 향상되며, sql에 의존하지 않아 독립적인 개발가능, 유지보수가 용이
- 복잡한 쿼리 처리가 어려우며, 학습곡선이 높고, 동작이해에 시간이 걸릴수있음.

@ 커맨드 객체 vs DTO (data transfer object)
커맨드 객체는 주로 클라이언트에서 서버로 데이터 입력에 사용됨
DTO는 주로 서버에서 클라이언트로 데이터 출력이나 계층 간 데이터 전송에 사용됨.
>>> 한마디로 둘다 데이터를 옮길때의 포장지

@ DAO (data access object)
DAO는 데이터 베이스 또는 기타 영속성 매커니즘과 상호작용을 추상화하고
캡슐화하는 객체로 쉽게 말하면 DTO로 감싸져온 데이터를 데이터베이스에 넣어주는 역할

@ http error code
1xx : 정보
2xx : 성공
3xx : 리다이렉션
4xx : 클라이언트 오류
5xx : 서버 오류

@ DI, IoC 

* DI란,
의존성 주입 (dependency injection)으로 각각의 코드가 종속성에 대해서 자유롭도록
파라미터값으로 종속성을 가질만한 객체나 값들을 파라미터로 받아서 직접 초기화
하도록 함.

* IoC란,
제어의 역전 (Inversion of Control)으로 프로그램 흐름을 개발자가 아닌 프레임워크가
담당하는 설계 원칙
(종속성의 해제 관리등을 프레임워크가 해주도록 하게함) => ioc 컨테이너의 역할

* bean
의존성의 주입을 프레임워크가 할때 그 객체를 bean이라는 단위로 나눔
ioc 컨테이너가 bean의 생명주기를 관리함.

@ 결합도, 응집도
결합도란 다른 코드와의 종속성이 깊은것을 의미 (반대로 응집도가 낮음)
응집도란 다른 코드와 종속성이 낮고 자신만의 코드가 깊음 (반대로 결합도가 낮음)

@ JSP (java server pages)
= 자바 기반의 서버 사이드 템플릿 엔진

@ Thyemleaf 
= 현대적 서버 사이드 java 템플릿 엔진 (최근 현업에서 많이 사용)
= html 속성을 이용한 자연스러운 템플릿


